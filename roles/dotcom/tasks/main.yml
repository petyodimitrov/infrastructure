- name: create app dirs
  file:
    dest: "{{ web_volume_path }}/{{ item }}"
    state: directory
  with_items:
    - legacy
    - uploads

- name: checkout app
  register: app_version
  git:
    accept_hostkey: yes
    dest: "{{ web_volume_path }}/dotcom"
    force: yes
    update: yes
    repo: "{{ dotcom_app_repository }}"

- name: find current app git sha
  register: app_name
  tags: backup
  shell: >
    echo "dotcom.$(git rev-parse --short HEAD)-$(date +%Y%m%d.%H%M%S)"
  args:
    chdir: "{{ web_volume_path }}/dotcom"

- name: ensure app image exists
  shell: >
    docker pull {{ dotcom_app_image }}

  when: app_version | changed or dotcom_force_deploy
- name: build app
  shell: >
    docker run --rm --tty
    --name {{ app_name.stdout }}-deps
    --volume {{ web_volume_path }}/dotcom:/app:rw
    --workdir /app
    --log-driver syslog --log-opt tag={{ app_name.stdout }}-deps --log-opt syslog-address={{ papertrail_log_destination }}
    --env MIX_ENV=prod
    {{ dotcom_app_image }}
    ./script/deps_install --only prod

- name: ensure app assets image exists
  shell: >
    docker pull {{ dotcom_assets_image }}

- name: compile assets
  when: app_version | changed or dotcom_force_deploy
  shell: >
    docker run --rm --tty
    --name {{ app_name.stdout }}-assets
    --volume {{ web_volume_path }}/dotcom:/app:rw
    --workdir /app
    --log-driver syslog --log-opt tag={{ app_name.stdout }}-assets --log-opt syslog-address={{ papertrail_log_destination }}
    --env MIX_ENV=prod
    {{ dotcom_assets_image }}
    ./script/assets_compile

- name: digest assets
  when: app_version | changed or dotcom_force_deploy
  shell: >
    docker run --rm --tty
    --name {{ app_name.stdout }}-assets
    --volume {{ web_volume_path }}/dotcom:/app:rw
    --workdir /app
    --log-driver syslog --log-opt tag={{ app_name.stdout }}-assets --log-opt syslog-address={{ papertrail_log_destination }}
    --env MIX_ENV=prod
    {{ dotcom_app_image }}
    ./script/assets_digest

- name: migrate db
  when: app_version | changed or dotcom_force_deploy
  shell: >
    docker run --rm --tty
    --name {{ app_name.stdout }}-db
    --volume {{ web_volume_path }}/dotcom:/app:rw
    --net {{ nginx_net }}
    --workdir /app
    --log-driver syslog --log-opt tag={{ app_name.stdout }}-db --log-opt syslog-address={{ papertrail_log_destination }}
    --env MIX_ENV=prod
    --env DB_URL=ecto://{{ postgres_admin_user }}:{{ postgres_admin_pass }}@postgres.{{ postgres_net }}/changelog
    {{ dotcom_app_image }}
    ./script/db_migrate

- name: deploy latest app version
  shell: >
    docker run --detach --tty
    --restart unless-stopped
    --label fqdn={{ fqdn }}
    --name {{ app_name.stdout }}
    --net {{ nginx_net }}
    --net-alias dotcom
    --volume {{ web_volume_path }}/dotcom:/app:rw
    --volume {{ web_volume_path }}/uploads:/uploads:rw
    --workdir /app
    --log-driver syslog --log-opt tag={{ app_name.stdout }} --log-opt syslog-address={{ papertrail_log_destination }}
    --env MIX_ENV=prod
    --env PORT=4000
    --env DB_URL=ecto://{{ postgres_admin_user }}:{{ postgres_admin_pass }}@postgres.{{ postgres_net }}/changelog
    --env CM_TOKEN={{ campaign_monitor_token }}
    {{ dotcom_app_image }}
    ./script/run

- name: configure nginx site
  template:
    src: 2016.changelog.com.j2
    dest: "{{ nginx_config_dir }}/sites/{{ fqdn }}.site"

- name: reload nginx so that it resolves the new app host
  shell: >
    docker exec nginx.{{ nginx_net }} nginx -t &&
    docker kill -s HUP nginx.{{ nginx_net }}

- name: find all app instances older than the last one
  register: venerable_apps
  shell: >
    docker ps -q --filter label=fqdn={{ fqdn }} | tail -n +2

- name: cleanup app instances older than the last one
  ignore_errors: true
  shell: >
    docker stop {{ venerable_apps.stdout_lines | join(" ") }} ;
    docker rm -f {{ venerable_apps.stdout_lines | join(" ") }}

- name: reload nginx so that it removes all venerable app hosts
  shell: >
    docker exec nginx.{{ nginx_net }} nginx -t &&
    docker kill -s HUP nginx.{{ nginx_net }}

- name: backup to S3
  tags: backup
  when: backup | default(false)
  shell: >
    docker run --rm --tty
    --name {{ app_name.stdout }}-backup
    --volume {{ web_volume_path }}/uploads:/uploads:ro
    --volume {{ web_volume_path }}/legacy:/legacy:ro
    --volume {{ web_volume_path }}/dotcom/_build/prod:/github.com/dotcom/_build/prod:ro
    --log-driver syslog --log-opt tag={{ app_name.stdout }}-backup --log-opt syslog-address={{ papertrail_log_destination }}
    {{ dotcom_backup_image }}
    sh -c "tar -cf - uploads legacy github.com | AWS_ACCESS_KEY_ID={{ dotcom_backup_aws_access_key_id }} AWS_SECRET_ACCESS_KEY={{ dotcom_backup_aws_secret_access_key }} gof3r put -b {{ dotcom_backup_s3_bucket }} -k {{ app_name.stdout }}.tar --endpoint {{ dotcom_backup_aws_region }}"
